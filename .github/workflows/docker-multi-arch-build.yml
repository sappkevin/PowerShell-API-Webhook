name: Docker Multi-Architecture Build

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Dockerfile.*'
      - '.github/workflows/docker-multi-arch-build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Dockerfile.*'
  workflow_dispatch:
  workflow_call:
    inputs:
      push_images:
        description: 'Whether to push the images to registry'
        required: false
        type: boolean
        default: false

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Linux image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.linux
          push: ${{ inputs.push_images }}
          tags: webhookshell:test-linux
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Linux image
        run: |
          # Pull the image
          docker image ls | grep webhookshell
          
          # Run a container to test the image
          docker run -d --name test-webhookshell -p 8080:80 webhookshell:test-linux
          
          # Wait for the container to start
          sleep 10
          
          # Test the health endpoint
          HEALTH_RESPONSE=$(curl -s http://localhost:8080/health || echo "FAILED")
          echo "Health response: $HEALTH_RESPONSE"
          
          if [[ "$HEALTH_RESPONSE" == *"Healthy"* ]]; then
            echo "✅ Health endpoint test passed"
          else
            echo "❌ Health endpoint test failed"
            docker logs test-webhookshell
            exit 1
          fi
          
          # Clean up
          docker rm -f test-webhookshell
  
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          install: true
      
      # Update the Dockerfile.windows content
      - name: Update Dockerfile.windows
        shell: powershell
        run: |
          # Update the content of the Dockerfile.windows
          $content = @'
          # Use Windows Server Core 2022 with .NET 8.0 runtime
          FROM mcr.microsoft.com/dotnet/aspnet:8.0-windowsservercore-ltsc2022 AS base
          WORKDIR /app
          EXPOSE 80
          EXPOSE 443

          # Install PowerShell Core using PowerShell commands
          SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

          # Download and install PowerShell Core
          RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
              Invoke-WebRequest -Uri "https://github.com/PowerShell/PowerShell/releases/download/v7.4.1/PowerShell-7.4.1-win-x64.msi" -OutFile PowerShell.msi; \
              Start-Process -FilePath msiexec.exe -ArgumentList '/i', 'PowerShell.msi', '/quiet', '/norestart' -Wait; \
              Remove-Item -Path PowerShell.msi; \
              $env:Path = [System.Environment]::GetEnvironmentVariable('Path', 'Machine'); \
              Write-Host "PowerShell Core installed successfully"

          # Build container image
          FROM mcr.microsoft.com/dotnet/sdk:8.0-windowsservercore-ltsc2022 AS build
          WORKDIR /src

          # Copy csproj and restore dependencies
          COPY ["src/Webhookshell.csproj", "src/"]
          RUN dotnet restore "src/Webhookshell.csproj"

          # Copy everything else and build
          COPY . .
          WORKDIR "/src"
          RUN dotnet publish "src/Webhookshell.csproj" -c Release -o /app/publish /p:UseAppHost=true

          # Final image
          FROM base AS final
          WORKDIR /app
          COPY --from=build /app/publish .
          ENTRYPOINT ["dotnet", "Webhookshell.dll"]
          '@
          Set-Content -Path "Dockerfile.windows" -Value $content
      
      # Build the Windows image
      - name: Build Windows image
        shell: powershell
        run: |
          docker build -t webhookshell:test-windows -f Dockerfile.windows .
      
      # Test the Windows image
      - name: Test Windows image
        shell: powershell
        run: |
          # Run a container to test the image
          docker run -d --name test-webhookshell -p 8080:80 webhookshell:test-windows
          
          # Wait for the container to start
          Start-Sleep -Seconds 20
          
          # Test the health endpoint
          try {
            $response = Invoke-WebRequest -Uri "http://localhost:8080/health" -ErrorAction Stop
            Write-Host "Response: $($response.Content)"
            
            if ($response.Content -match "Healthy") {
              Write-Host "✅ Health endpoint test passed"
            } else {
              Write-Host "❌ Health endpoint test failed"
              docker logs test-webhookshell
              exit 1
            }
          } catch {
            Write-Host "❌ Health endpoint test failed: $_"
            docker logs test-webhookshell
            exit 1
          } finally {
            # Clean up
            docker rm -f test-webhookshell
          }