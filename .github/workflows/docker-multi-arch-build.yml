name: Docker Multi-Architecture Build

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      push_images:
        description: 'Whether to push the images to registry'
        required: false
        type: boolean
        default: false
    secrets:
      DOCKERHUB_USERNAME:
        description: 'Docker Hub username'
        required: true
      DOCKERHUB_TOKEN:
        description: 'Docker Hub token'
        required: true

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker
        
      - name: Build Linux image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.linux
          load: true
          no-cache: true  # Disable build cache
          tags: webhookshell:test-linux
      
      - name: Test Linux image
        run: |
          docker images | grep webhookshell
          docker run -d --name test-webhookshell -p 8080:8080 webhookshell:test-linux
          sleep 10
          HEALTH_RESPONSE=$(curl -s http://localhost:8080/health || echo "FAILED")
          echo "Health response: $HEALTH_RESPONSE"
          
          if [[ "$HEALTH_RESPONSE" == *"Healthy"* ]]; then
            echo "✅ Health endpoint test passed"
          else
            echo "❌ Health endpoint test failed"
            docker logs test-webhookshell
            exit 1
          fi
          
          docker rm -f test-webhookshell
          
      - name: Push Docker image for Linux
        if: ${{ inputs.push_images }}
        shell: powershell
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/webhookshell:latest-linux
  
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Build .NET Application
      run: |
        dotnet restore
        dotnet publish src/Webhookshell.csproj -c Release -o ./src/bin/Release/net8.0/publish
    
    # Build with standard Docker commands
    - name: Build Docker image
      shell: powershell
      run: |
        # Build the image using standard Docker command
        docker build -t webhookshell:test-windows -f Dockerfile.windows .
        
        # Verify the image was created
        docker images webhookshell:test-windows
    
    - name: Test Windows Docker image
      shell: powershell
      run: |
        try {
          # Start the container
          docker run -d --name test-webhookshell -p 8080:8080 webhookshell:test-windows
          
          # Wait for the health endpoint to respond (up to 120 seconds)
          $timeout = 120
          $interval = 5
          $elapsed = 0
          $healthy = $false
          while ($elapsed -lt $timeout -and -not $healthy) {
            try {
              $response = Invoke-WebRequest -Uri "http://localhost:8080/health" -TimeoutSec 5 -ErrorAction Stop
              if ($response.Content -match "Healthy") {
                $healthy = $true
              }
            } catch {
              Write-Host "Waiting for container to be ready... ($elapsed/$timeout seconds)"
              Start-Sleep -Seconds $interval
              $elapsed += $interval
            }
          }
          
          if (-not $healthy) {
            Write-Host "❌ Container failed to become healthy after $timeout seconds"
            docker logs test-webhookshell
            exit 1
          }
          
          # Log success and response details
          Write-Host "✅ Health endpoint test passed"
          
          # Cleanup
          docker rm -f test-webhookshell
        } catch {
          Write-Host "❌ Test failed: $_"
          docker logs test-webhookshell
          docker rm -f test-webhookshell -ErrorAction SilentlyContinue
          exit 1
        }
        
    - name: Push Docker image for Windows
      if: ${{ inputs.push_images }}
      shell: powershell
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/webhookshell:latest-windows
