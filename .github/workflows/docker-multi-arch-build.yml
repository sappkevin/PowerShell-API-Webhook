name: Docker Multi-Architecture Build

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      push_images:
        description: 'Whether to push the images to registry'
        required: false
        type: boolean
        default: false

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker
        
      - name: Build Linux image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.linux
          load: true
          tags: webhookshell:test-linux
      
      - name: Test Linux image
        run: |
          docker images | grep webhookshell
          docker run -d --name test-webhookshell -p 8080:80 webhookshell:test-linux
          sleep 10
          HEALTH_RESPONSE=$(curl -s http://localhost:8080/health || echo "FAILED")
          echo "Health response: $HEALTH_RESPONSE"
          
          if [[ "$HEALTH_RESPONSE" == *"Healthy"* ]]; then
            echo "✅ Health endpoint test passed"
          else
            echo "❌ Health endpoint test failed"
            docker logs test-webhookshell
            exit 1
          fi
          
          docker rm -f test-webhookshell
  
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker
          
      - name: Prepare Dockerfile for Windows
        shell: powershell
        run: |
          @"
          FROM mcr.microsoft.com/dotnet/aspnet:8.0-windowsservercore-ltsc2022 AS base
          WORKDIR /app
          EXPOSE 80
          EXPOSE 443

          SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

          FROM mcr.microsoft.com/dotnet/sdk:8.0-windowsservercore-ltsc2022 AS build
          WORKDIR /src

          COPY ["src/Webhookshell.csproj", "src/"]
          RUN dotnet restore "src/Webhookshell.csproj"

          COPY . .
          WORKDIR "/src"
          RUN dotnet publish "src/Webhookshell.csproj" -c Release -o /app/publish /p:UseAppHost=true

          FROM base AS final
          WORKDIR /app
          COPY --from=build /app/publish .
          ENTRYPOINT ["dotnet", "Webhookshell.dll"]
          "@ | Set-Content -Path Dockerfile.windows
      
      - name: Build Windows image
        shell: powershell
        run: |
          docker build -t webhookshell:test-windows -f Dockerfile.windows .
      
      - name: Test Windows docker image
        shell: powershell
        run: |
            docker run -d --name test-webhookshell -p 8080:80 webhookshell:test-windows
            
            # Wait for container to fully start
            Start-Sleep -Seconds 30
            
            # Try multiple ways to connect
            try {
                # Try localhost
                $response1 = Invoke-WebRequest -Uri "http://localhost:8080/health" -ErrorAction Stop
                Write-Host "Localhost Response: $($response1.Content)"
                
                # Try 127.0.0.1
                $response2 = Invoke-WebRequest -Uri "http://127.0.0.1:8080/health" -ErrorAction Stop
                Write-Host "127.0.0.1 Response: $($response2.Content)"
                
                # Try container IP
                $containerIp = (docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' test-webhookshell)
                $response3 = Invoke-WebRequest -Uri "http://$containerIp/health" -ErrorAction Stop
                Write-Host "Container IP Response: $($response3.Content)"
                
                # Check for "Healthy" in any response
                if (
                    ($response1.Content -match "Healthy") -or 
                    ($response2.Content -match "Healthy") -or 
                    ($response3.Content -match "Healthy")
                ) {
                    Write-Host "✅ Health endpoint test passed"
                } else {
                    Write-Host "❌ Health endpoint test failed: No 'Healthy' response"
                    docker logs test-webhookshell
                    exit 1
                }
            } catch {
                Write-Host "❌ Health endpoint test failed: $_"
                docker logs test-webhookshell
                exit 1
            } finally {
                docker rm -f test-webhookshell
            }