name: .NET Webhook API Build and Release
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    uses: ./.github/workflows/test.yml
    with:
      dotnet-version: '8.0.x'
  
  generate-version-number:
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create version number
        id: create_version
        run: |
          # Create a valid version using date and GitHub run number
          # Format: 1.0.YYDDD.RUNID (limited to 4 segments for .NET versioning)
          DATE_PART=$(date +%y%j)
          RUN_PART="${GITHUB_RUN_NUMBER:-1}"
          
          # Ensure run part is numeric and limited to 5 digits max
          RUN_PART=$(echo $RUN_PART | tr -cd '0-9' | cut -c 1-5)
          
          # Format the version string - valid for .NET (Major.Minor.Build.Revision)
          BUILD_NUMBER="${DATE_PART}"
          REVISION_NUMBER="${RUN_PART}"
          VERSION="1.0.${BUILD_NUMBER}.${REVISION_NUMBER}"
          TAG_NAME="v${VERSION}"
          
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
          echo "Generated version: ${VERSION}"
          echo "Generated tag: ${TAG_NAME}"

  docker-build-test-deploy-images:
    needs: [test,generate-version-number]
    if: ${{ (github.ref == 'refs/heads/main') && (github.event_name != 'pull_request') }}
    uses: ./.github/workflows/docker-multi-arch-build.yml
    with:
      push_images: true
      version_tag: ${{ needs.generate-version-number.outputs.version }}
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  
  # Skipping - For Development only
  performance-testing:
    needs: [docker-build-test-deploy-images]
    if: ${{ false }}  
    uses: ./.github/workflows/performance-test.yml
    with:
      concurrentUsers: '50'
      testDuration: '5'
      apiUrl: 'http://localhost:8080'
  # Skipping - For Development only
  build-and-release-binaries:
    needs: [performance-testing]
    runs-on: ubuntu-latest
    if: ${{ false }}  
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetches all history for all tags and branches

    - name: Create version number
      id: version
      run: |
          # Create a valid version using date and GitHub run number
          # Format: 1.0.YYDDD.RUNID (limited to 4 segments for .NET versioning)
          DATE_PART=$(date +%y%j)
          RUN_PART="${GITHUB_RUN_NUMBER:-1}"
          
          # Ensure run part is numeric and limited to 5 digits max
          RUN_PART=$(echo $RUN_PART | tr -cd '0-9' | cut -c 1-5)
          
          # Format the version string - valid for .NET (Major.Minor.Build.Revision)
          BUILD_NUMBER="${DATE_PART}"
          REVISION_NUMBER="${RUN_PART}"
          VERSION="1.0.${BUILD_NUMBER}.${REVISION_NUMBER}"
          TAG_NAME="v${VERSION}"
          
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
          echo "Generated version: ${VERSION}"
          echo "Generated tag: ${TAG_NAME}"
      
    - name: Setup .NET 8.0 (LTS)
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Create version number
      id: create_version
      run: |
        # Create a valid version using date and GitHub run number
        # Format: 1.0.YYDDD.RUNID (limited to 4 segments for .NET versioning)
        DATE_PART=$(date +%y%j)
        RUN_PART="${GITHUB_RUN_NUMBER:-1}"
        
        # Ensure run part is numeric and limited to 5 digits max
        RUN_PART=$(echo $RUN_PART | tr -cd '0-9' | cut -c 1-5)
        
        # Format the version string - valid for .NET (Major.Minor.Build.Revision)
        BUILD_NUMBER="${DATE_PART}"
        REVISION_NUMBER="${RUN_PART}"
        VERSION="1.0.${BUILD_NUMBER}.${REVISION_NUMBER}"
        TAG_NAME="v${VERSION}"
        
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        
        echo "Generated version: ${VERSION}"
        echo "Generated tag: ${TAG_NAME}"
            
    - name: Create and push tag
      run: |
            git config user.name github-actions
            git config user.email github-actions@github.com
            git tag ${{ env.TAG_NAME }}
            git push origin ${{ env.TAG_NAME }}
            
    - name: Restore dependencies
      run: dotnet restore
          
    - name: Build the project
      run: dotnet build --configuration Release --no-restore
            
    - name: Publish DLL
      run: |
            dotnet publish src/Webhookshell.csproj \
              -c Release \
              -o ./publish/dll \
              -p:Version=${{ env.VERSION }} \
              --no-restore
            
    - name: Publish EXE (Windows Self-Contained)
      run: |
            dotnet publish src/Webhookshell.csproj \
              -c Release \
              -r win-x64 \
              --self-contained true \
              -p:PublishSingleFile=true \
              -o ./publish/exe \
              -p:Version=${{ env.VERSION }} \
              --no-restore

    - name: Zip Release Files
      run: |
        cd publish/dll && zip -r ../../webhookshell-dll.zip .
        cd ../exe && zip -r ../../webhookshell-exe.zip .
        cd ../..
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG_NAME }}
        files: |
          webhookshell-dll.zip
          webhookshell-exe.zip
        name: Release ${{ env.TAG_NAME }}
        body: |
          # PowerShell API Webhook ${{ env.TAG_NAME }}

          ## What's New
          - Support for PowerShell script execution via webhooks
          - IP address filtering
          - Time-based triggers
          - Cross-platform support (Windows/Linux)
          - Swagger UI for API documentation and testing
          - Docker and Kubernetes support

          ## Components
          - `webhookshell-dll.zip`: Platform-independent .NET assembly
          - `webhookshell-exe.zip`: Self-contained Windows x64 executable

          ## System Requirements
          - Windows: Windows 10 or later (for EXE package)
          - Other platforms: .NET 8.0 Runtime
          - PowerShell Core (pwsh) or Windows PowerShell

          ## Configuration
          - Update appsettings.json with your webhook configurations
          - Ensure proper permissions for script execution
          - Configure IP allow lists if needed
 

  


  
