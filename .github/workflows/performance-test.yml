name: Performance Testing

on:
  workflow_dispatch:
    inputs:
      concurrentUsers:
        description: 'Number of concurrent users to simulate'
        required: true
        default: '50'
      testDuration:
        description: 'Test duration in minutes'
        required: true
        default: '5'
      apiUrl:
        description: 'API URL to test (defaults to local service)'
        required: false
        default: 'http://localhost:5000'
  pull_request:
    types: [labeled]
  workflow_call:
    inputs:
      concurrentUsers:
        type: string
        required: false
        default: '50'
      testDuration:
        type: string
        required: false
        default: '5'
      apiUrl:
        type: string
        required: false
        default: 'http://localhost:5000'

jobs:
  performance-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
      
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install aiohttp rich
      
    - name: Setup .NET 8.0 (for API service)
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
      
    - name: Start API Service for Testing
      run: |
        dotnet restore
        dotnet build --configuration Release
        dotnet publish src/Webhookshell.csproj -c Release -o ./publish
        cd ./publish
        chmod +rwx ./scripts/powershell/health-check-script.ps1
        dotnet Webhookshell.dll &
        echo "Waiting for API to start..."
        sleep 10
      
    - name: Copy load testing script
      run: |
        mkdir -p performance_tests
        chmod +rwx performance_tests
        cat > performance_tests/webhook_load_tester.py << 'EOL'
        #!/usr/bin/env python3
        import argparse
        import asyncio
        import aiohttp
        import json
        import time
        import statistics
        from datetime import datetime
        import os
        from rich.console import Console
        from rich.table import Table
        from rich.progress import Progress, TaskID

        console = Console()

        def main():
            parser = argparse.ArgumentParser(description="WebhookShell API Load Tester")
            parser.add_argument("--api-url", default="http://localhost:5000", help="API URL to test")
            parser.add_argument("--api-key", default="24ffc5be-7dd8-479f-898e-27169bf23e7f", help="API key for authentication")
            parser.add_argument("--concurrent-users", type=int, default=50, help="Number of concurrent users")
            parser.add_argument("--duration", type=int, default=5, help="Test duration in minutes")
            
            args = parser.parse_args()
            
            # Ensure reports directory exists
            os.makedirs("reports", exist_ok=True)
            
            tester = WebhookLoadTester(
                api_url=args.api_url,
                api_key=args.api_key,
                concurrent_users=args.concurrent_users,
                duration_minutes=args.duration
            )
            
            asyncio.run(tester.run_test())

        class WebhookLoadTester:
            def __init__(self, api_url, api_key, concurrent_users, duration_minutes):
                self.api_url = api_url
                self.api_key = api_key
                self.concurrent_users = concurrent_users
                self.duration_seconds = duration_minutes * 60
                self.results = {
                    "GET API": {"success": 0, "fail": 0, "latencies": []},
                    "POST API": {"success": 0, "fail": 0, "latencies": []},
                    "Background Job": {"success": 0, "fail": 0, "latencies": []}
                }
            
            # (Rest of the existing WebhookLoadTester class methods remain the same)
            
            async def run_test(self):
                console.print(f"[bold green]Starting load test against {self.api_url}[/bold green]")
                console.print(f"Concurrent users: {self.concurrent_users}")
                console.print(f"Test duration: {self.duration_seconds // 60} minutes")
                
                # Create a shared session for all requests
                async with aiohttp.ClientSession() as session:
                    # Set up progress tracking
                    with Progress() as progress:
                        get_task = progress.add_task("[cyan]GET API Requests...", total=self.duration_seconds)
                        post_task = progress.add_task("[magenta]POST API Requests...", total=self.duration_seconds)
                        bg_task = progress.add_task("[yellow]Background Job Requests...", total=self.duration_seconds)
                        
                        # Start the test scenarios
                        await asyncio.gather(
                            self._run_get_scenario(session, progress, get_task),
                            self._run_post_scenario(session, progress, post_task),
                            self._run_background_job_scenario(session, progress, bg_task)
                        )
                
                # Generate report
                self._generate_report()

            # (Rest of the existing methods remain the same)

        if __name__ == "__main__":
            main()
        EOL
            
    - name: Run Performance Tests
      run: |
            mkdir -p performance_tests/reports
            chmod +rwx performance_tests/reports
            chmod +rwx performance_tests/webhook_load_tester.py
            cd performance_tests
            python webhook_load_tester.py --api-url ${{ github.event.inputs.apiUrl || 'http://localhost:5000' }} --concurrent-users ${{ github.event.inputs.concurrentUsers || '50' }} --duration ${{ github.event.inputs.testDuration || '5' }}
            
    - name: Upload Test Reports
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-reports
        path: performance_tests/reports/
        if-no-files-found: error  # Change to error to catch issues

    - name: Create PR Comment with Test Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
            const fs = require('fs');
            const summaryContent = fs.readFileSync('performance_tests/reports/summary.md', 'utf8');
            
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summaryContent
            });
            
    - name: Display Test Summary
      run: |
            cat performance_tests/reports/summary.md