# Use Windows Server Core 2022 with .NET 8.0 runtime
FROM mcr.microsoft.com/dotnet/aspnet:8.0-windowsservercore-ltsc2022 AS base
WORKDIR /app

# Build 
# Copy the solution file into the container
COPY *.sln ./

# Copy all project files into the container
COPY src/*.csproj ./src/

# Restore dependencies for the solution
RUN dotnet restore

# Copy all source code into the container
COPY src/ ./src/

# Build and publish the application
RUN dotnet publish -c Release -o /out

# Set environment variables
ENV POWERSHELL_VERSION=7.4.7

RUN powershell.exe -Command "Get-ChildItem Env: | Format-Table -AutoSize"

# Windows Server Core already has PowerShell available
#SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Download and install Python3
RUN powershell -Command "Invoke-WebRequest -Uri https://www.python.org/ftp/python/3.10.11/python-3.10.11-amd64.exe -OutFile python-installer.exe; \
    Start-Process -FilePath python-installer.exe -ArgumentList '/quiet InstallAllUsers=1 PrependPath=1' -Wait; \
    Remove-Item python-installer.exe"

RUN python -m ensurepip --upgrade; \
    python -m pip install --upgrade pip; \
    pip install aiohttp rich

# Verify Python installation
RUN python --version

# Download and install PowerShell Core
RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
    Invoke-WebRequest -Uri "https://github.com/PowerShell/PowerShell/releases/download/v7.4.1/PowerShell-7.4.1-win-x64.msi" -OutFile PowerShell.msi; \
    Start-Process -FilePath msiexec.exe -ArgumentList '/i', 'PowerShell.msi', '/quiet', '/norestart' -Wait; \
    Remove-Item -Path PowerShell.msi; \
    $env:Path = [System.Environment]::GetEnvironmentVariable('Path', 'Machine'); \
    Write-Host "PowerShell Core installed successfully"

# Verify PowerShell installation
RUN pwsh.exe -command "$PSVersionTable"

# Build container image
FROM mcr.microsoft.com/dotnet/aspnet:8.0-windowsservercore-ltsc2022 AS runtime
WORKDIR /app

# Copy the published output from the build stage
COPY --from=build /out ./

EXPOSE 8080 8443
ENTRYPOINT ["dotnet", "Webhookshell.dll"]
